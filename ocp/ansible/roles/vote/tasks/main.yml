---
#
# We have different source for vote image depending whether whether
# we use self built image or external. This is for self built (e.g. staging).
#
- name: Image stream
  tags: vote
  when: vote_build
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          name: "{{ app }}-vote"
          annotations:
            description: Image used to run vote
            template.alpha.openshift.io/wait-for-ready: "true"
          labels:
            app: "{{ app }}"
        spec:
          lookupPolicy:
            local: false

#
# We have different source for vote image depending whether whether
# we use self built image or external. This is for external (e..g prod).
#
- name: Image stream
  tags: vote
  when: not vote_build
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          name: "{{ app }}-vote"
          annotations:
            description: Image used to run vote
            template.alpha.openshift.io/wait-for-ready: "true"
          labels:
            app: "{{ app }}"
        spec:
          lookupPolicy:
            local: false
          tags:
            - annotations: null
              from:
                kind: DockerImage
                name: "{{ vote_image }}:{{ vote_image_tag }}"
              name: "{{ vote_image_tag }}"
              importPolicy:
                scheduled: true
              referencePolicy:
                type: Source

- name: BuildConfig
  tags: vote
  when: vote_build
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: build.openshift.io/v1
        kind: BuildConfig
        metadata:
          name: "{{ app }}-vote"
          labels:
            app: "{{ app }}"
            app.kubernetes.io/component: vote
            app.kubernetes.io/instance: "{{ app }}"
            app.kubernetes.io/name: python
            app.kubernetes.io/part-of: "{{ app }}"
            app.openshift.io/runtime: python
            app.openshift.io/runtime-version: "{{ vote_python_version }}"
          annotations:
            app.openshift.io/vcs-ref: "{{ vote_source_repository_ref }}"
            app.openshift.io/vcs-uri: "{{ vote_source_repository_url }}"
        spec:
          output:
            to:
              kind: ImageStreamTag
              name: "{{ app }}-app:latest"
          successfulBuildsHistoryLimit: 5
          failedBuildsHistoryLimit: 5
          strategy:
            type: Source
            sourceStrategy:
              from:
                kind: ImageStreamTag
                name: python:2.7
              pullSecret:
                name: registry-redhat-io-secret
          source:
            type: Git
            git:
              uri: "{{ vote_source_repository_url }}"
              ref: "{{ vote_source_repository_ref }}"
            contextDir: /vote
          triggers:
            - gitlab:
                secretReference:
                  name: "{{ app }}-github-webhook"
              type: GitHub
            - imageChange:
                from:
                  kind: ImageStreamTag
                  name: python:2.7
              type: ImageChange
            - type: ConfigChange
          runPolicy: Serial


- name: Deployment config
  tags: vote
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        metadata:
          annotations:
            app.openshift.io/connects-to: "{{ app }}-redis"
          labels:
            app: "{{ app }}"
            app.kubernetes.io/component: vote
            app.kubernetes.io/instance: "{{ app }}-vote"
            app.kubernetes.io/name: python
            app.kubernetes.io/part-of: "{{ app }}"
            app.openshift.io/runtime: python
            app.openshift.io/runtime-version: "{{ vote_python_version }}"
          name: "{{ app }}-vote"
        spec:
          replicas: "{{ vote_replicas }}"
          revisionHistoryLimit: 5
          selector:
            deploymentconfig: "{{ app }}-vote"
          strategy:
            activeDeadlineSeconds: 21600
            rollingParams:
              intervalSeconds: 1
              maxSurge: 25%
              maxUnavailable: 25%
              timeoutSeconds: 600
              updatePeriodSeconds: 1
            type: Rolling
          template:
            metadata:
              creationTimestamp: null
              labels:
                deploymentconfig: "{{ app }}-vote"
              name: "{{ app }}-vote"
            spec:
              containers:
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              terminationGracePeriodSeconds: 30
          test: false
          triggers:
            - imageChangeParams:
                automatic: true
                containerNames:
                  - "{{ app }}-vote"
                from:
                  kind: ImageStreamTag
                  name: "{{ app }}-vote:{{ vote_image_tag }}"
              type: ImageChange
            - type: ConfigChange

- name: Autoscaling
  tags: vote
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: autoscaling/v1
        kind: HorizontalPodAutoscaler
        metadata:
          labels:
            app: "{{ app }}"
          name: "{{ app }}-vote"
        spec:
          maxReplicas: "{{ vote_hpa_max_replicas }}"
          minReplicas: "{{ vote_hpa_min_replicas }}"
          scaleTargetRef:
            voteVersion: v1
            kind: DeploymentConfig
            name: "{{ app }}-vote"
          targetCPUUtilizationPercentage:
            "{{ vote_hpa_target_cpu_utilization_percentage }}"

- name: service
  tags: vote
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: v1
        kind: Service
        metadata:
          labels:
            app: "{{ app }}"
            app.kubernetes.io/component: vote
            app.kubernetes.io/instance: "{{ app }}"
            app.kubernetes.io/name: python
            app.kubernetes.io/part-of: "{{ app }}"
          name: "{{ app }}-vote"
        spec:
          ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 8080
          sessionAffinity: None
          type: ClusterIP
          selector:
            deploymentconfig: "{{ app }}-vote"

- name: Route
  tags: vote
  k8s:
    state: "{{ state }}"
    definition:
      - voteVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: "{{ app }}-vote"
          labels:
            app: "{{ app }}"
            letsencrypt-me: 'true'
        spec:
          host: "{{ vote_fqdn }}"
          port:
            targetPort: 8080-tcp
          to:
            kind: Service
            name: "{{ app }}-vote"
            weight: 100
          wildcardPolicy: None
          tls:
            termination: edge
